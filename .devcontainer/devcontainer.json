{
	"name": "BuildStream-dev",
	"dockerFile": "Dockerfile",
	"runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined","--privileged"],

	// Use 'settings' to set *default* container specific settings.json values on container create. 
	// You can edit these settings after create using File > Preferences > Settings > Remote.
	"settings": { 
		"terminal.integrated.shell.linux": "/bin/bash",
		"python.pythonPath": "/usr/local/bin/python",
		"python.linting.enabled": true,
		"python.linting.pylintEnabled": true,
		"python.linting.pylintPath": "/usr/local/bin/pylint"
	},

	// Use 'appPort' to create a container with published ports. If the port isn't working, be sure
	// your server accepts connections from all interfaces (0.0.0.0 or '*'), not just localhost.
	// "appPort": [],

	// Uncomment the next line to run commands after the container is created.
	// "postCreateCommand": "gcc -v",
    "postCreateCommand": "/bin/bash .devcontainer/bootstrap.sh",

	// Uncomment the next line to have VS Code connect as an existing non-root user in the container. 
	// On Linux, by default, the container user's UID/GID will be updated to match your local user. See
	// https://aka.ms/vscode-remote/containers/non-root for details on adding a non-root user if none exist.
	"remoteUser": "vscode",

	// Expand the PATH to include the tools we built
	"remoteEnv": {
		 "PATH": "/home/vscode/dist/usr/local/bin:/home/vscode/venv/buildstream/bin:${containerEnv:PATH}"
	},

	// Add the IDs of extensions you want installed when the container is created in the array below.
	"extensions": [
		"ms-azuretools.vscode-docker",
		"ms-python.python",
		"ms-vscode.cpptools",
		"ms-vscode.cmake-tools",
		"ms-vsliveshare.vsliveshare-pack",
		"zxh404.vscode-proto3"
	]
}